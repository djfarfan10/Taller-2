library(pacman)
install.packages("pacman")
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample) # Muestreo espacial para modelos de aprendizaje automático
load("Train2.Rda")
load("Train2.Rda")
load("Train2.rda")
setwd("C:/Users/dj.farfan10.UANDES/Documents/GitHub/Taller-2/stores")
load("Train2.Rda")
View(train)
glimpse(train)
glimpse(train$distancia_TM)
summarise(train$distancia_TM)
summary(train$distancia_TM)
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-2/stores")
df_train<- read.csv("train.csv")
head(df_train)
df_test<- read.csv("test.csv")
head(df_test)
glimpse(df_train)
df_train %>%
count(property_type)
sapply(df_train, function(x) sum(is.na(x)))
df_train_1<- df_train[!is.na(df_train$description), ]
sapply(df_train_1, function(x) sum(is.na(x)))
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("[Cc]asa", description), "Casa", property_type))
# Se repite el caso anterior pero ahora buscamos apartamento o apto.
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("[Aa]pto|[Aa]partamento", description), "Apartamento", property_type_2)) %>%
select(-property_type)
df_train_1 %>%
count(property_type_2)
# Todo el texto a minisculas
df_train_1 <- df_train_1 %>%
mutate(description = str_to_lower(description))
# Todo el texto a minisculas
df_train_1 <- df_train_1 %>%
mutate(description = str_to_lower(description))
# Eliminación de tildes
df_train_1 <- df_train_1 %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Eliminamción de caracteres especiales
df_train_1 <- df_train_1 %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
# Eliminamos espacios extras
df_train_1 <- df_train_1 %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
#Creación de variable dicotoma para parqueaderos, garajes o estacionamiento
df_train_1 <- df_train_1 %>%
mutate(parqueadero = as.numeric(grepl("[Pp]arqueadero?|[Gg]araje?|[Ee]stacionamiento?", df_train_1$description)))
df_train_1 %>%
count(parqueadero)
#Creación de variable de área desde la descripción
area_total <- str_extract(df_train_1$description, "[0-9]{2,} m[a-z0-9]+|[0-9]{2,}m[a-z0-9]+")
head(area_total)
df_train_1 <- df_train_1 %>%
mutate(area_tamano=str_extract(area_total,"[0-9]{2,}"))
df_train_1$area_tamano <- as.numeric(df_train_1$area_tamano)
library (skimr)
require(skimr)
skim(df_train_1)
# Se escoge el valor máximo de las tres variables que tienen área asociada y se crea una sola para minimizar la cantidad de nan de la variable
df_train_1 <- df_train_1 %>%
mutate(area_def=pmax(df_train_1$surface_covered,df_train_1$surface_total,df_train_1$area_tamano,na.rm = TRUE))
x<- 20000
subset_df <- subset(df_train_1, df_train_1$area_def>x & df_train_1$area_def !="none")
print(subset_df)
subset_df %>%
count(property_type_2)
sapply(df_train_1, function(x) sum(is.na(x)))
hist(df_train_1$area_def, main="Histograma del área", xlab="Área",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
hist(df_train_1$price, main="Histograma del precio", xlab="Precio",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_continuas<- df_train_1 %>%
select(area_def, price)
summary(df_continuas)
NAN2_df_area <- df_train_1[!is.na(df_train_1$area_def), ]
sapply(NAN2_df_area, function(x) sum(is.na(x)))
mean_area<- mean(NAN2_df_area$area_def)
print(mean_area)
median_area<- median(NAN2_df_area$area_def)
print(median_area)
df_train_1 <- df_train_1 %>%
mutate(area_def = replace_na(area_def, 119),)
summary(df_train_1)
sapply(df_train_1, function(x) sum(is.na(x)))
std_area<- sd(NAN2_df_area$area_def)
print(std_area)
mean_plus_3std<-mean_area+3*std_area
print(mean_plus_3std)
df_train_1<- df_train_1[df_train_1$area_def <= 1000, ]
df_train_1<- df_train_1[df_train_1$area_def >= 30, ]
summary(df_train_1)
hist(df_train_1$area_def, main="Histograma del área", xlab="Área",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
banos_1 <- str_extract(df_train_1$description, "\\s? [0-9]+ ba[^lsrh][^cd]")
print(banos_1)
skim(banos_1)
banos_conteo <- str_count(df_train_1$description, "ba[^lsrh][^cd]")
skim(banos_conteo)
df_train_1 <- df_train_1 %>%
mutate(bano_2=str_extract(banos_1,"[0-9]+")) %>%
mutate(bano_3=str_count(df_train_1$description, "ba[^lsrh][^cd]"))
df_train_1$bano_2 <- as.numeric(df_train_1$bano_2)
df_train_1$bano_3 <- as.numeric(df_train_1$bano_3)
skim(df_train_1)
table(df_train_1$bano_2)
df_train_1 <- df_train_1 %>% # Se escoge el valor máximo de las variables
mutate(bano_def=pmax(df_train_1$bano_2,df_train_1$bano_3,df_train_1$bathrooms,na.rm = TRUE))
df_train_1 <- df_train_1 %>%
mutate(bano_def=ifelse(bano_def>10,pmax(df_train_1$bano_3,df_train_1$bathrooms,na.rm = TRUE),df_train_1$bano_def))
skim(df_train_1)
glimpse(df_train_1)
df_train_1$bano_defnum <- as.numeric(df_train_1$bano_def)
hist(df_train_1$bano_defnum, main="Histograma de banos", xlab="Banos",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=2)
# Crear una tabla de frecuencias usando la función table para baños
tabla_frecuencias_banos <- table(df_train_1$bano_defnum)
# Mostrar la tabla de frecuencias
print(tabla_frecuencias_banos)
summary(df_train_1$bano_defnum)
tabla <- table(df_train_1$bano_def)
print(tabla)
skim(df_train_1)
df_train_1 <- df_train_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
skim(df_train_1)
glimpse(df_train_1)
summary(df_train_1$bano_social)
df_train_1 <- df_train_1 %>%
mutate(bodega1=str_detect(df_train_1$description,"[bv]o?de?[gj]a?")) %>%
mutate(deposito1=str_detect(df_train_1$description,"de?po?[cs]ito?s?")) %>%
mutate(deposito_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_train_1 %>%
count(deposito_def)
df_train_1 <- df_train_1 %>%
mutate(nuevo=str_detect(df_train_1$description,"[nm]ue[vb][oa]")) %>%
mutate(estado_construccion=ifelse((nuevo==TRUE),1,0))
df_train_1 %>%
count(estado_construccion)
df_train_1 <- df_train_1 %>%
mutate(remodelado=str_detect(df_train_1$description,"[a-z]emodela[db][a-z]")) %>%
mutate(estado_remodelado=ifelse((remodelado==TRUE),1,0))
df_train_1 %>%
count(estado_remodelado)
df_train_1 <- df_train_1 %>%
mutate(terraza=str_detect(df_train_1$description,"terra[sz]a?")) %>%
mutate(balcon=str_detect(df_train_1$description,"[vb]alcon")) %>%
mutate(terraza_balcon_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_train_1 %>%
count(terraza_balcon_def)
glimpse(df_test)
df_test %>%
count(property_type)
sapply(df_test, function(x) sum(is.na(x)))
df_test_1<- df_test[!is.na(df_test$description), ]
sapply(df_test_1, function(x) sum(is.na(x)))
df_test_1 <- df_test_1 %>%
mutate(property_type_2 = ifelse(grepl("[Cc]asa", description), "Casa", property_type))
df_test_1 <- df_test_1 %>%
mutate(property_type_2 = ifelse(grepl("[Aa]pto|[Aa]partamento", description), "Apartamento", property_type_2)) %>%
select(-property_type)
df_test_1 %>%
count(property_type_2)
df_test_1 <- df_test_1 %>%
mutate(description = str_to_lower(description))
df_test_1 <- df_test_1 %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
df_test_1 <- df_test_1 %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
df_test_1 <- df_test_1 %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df_test_1 <- df_test_1 %>%
mutate(parqueadero = as.numeric(grepl("[Pp]arqueadero?|[Gg]araje?|[Ee]stacionamiento?", df_test_1$description)))
df_test_1 %>%
count(parqueadero)
area_total <- str_extract(df_test_1$description, "[0-9]{2,} m[a-z0-9]+|[0-9]{2,}m[a-z0-9]+")
head(area_total)
df_test_1 <- df_test_1 %>%
mutate(area_tamano=str_extract(area_total,"[0-9]{2,}"))
df_test_1$area_tamano <- as.numeric(df_test_1$area_tamano)
skim(df_test_1)
df_test_1 <- df_test_1 %>%
mutate(area_def=pmax(df_test_1$surface_covered,df_test_1$surface_total,df_test_1$area_tamano,na.rm = TRUE))
x<- 20000
subset_df_test <- subset(df_test_1, df_test_1$area_def>x & df_test_1$area_def !="none")
print(subset_df_test)
subset_df_test %>%
count(property_type_2)
sapply(df_test_1, function(x) sum(is.na(x)))
hist(df_test_1$area_def, main="Histograma del área", xlab="Área",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_continuas<- df_test_1 %>%
select(area_def)
summary(df_continuas)
NAN2_df_area <- df_test_1[!is.na(df_test_1$area_def), ]
sapply(NAN2_df_area, function(x) sum(is.na(x)))
mean_area<- mean(NAN2_df_area$area_def)
print(mean_area)
median_area<- median(NAN2_df_area$area_def)
print(median_area)
df_test_1 <- df_test_1 %>%
mutate(area_def = replace_na(area_def, 125),)
summary(df_test_1)
sapply(df_test_1, function(x) sum(is.na(x)))
std_area<- sd(NAN2_df_area$area_def)
print(std_area)
mean_plus_3std<-mean_area+3*std_area
print(mean_plus_3std)
df_test_1<- df_test_1[df_test_1$area_def <= 1000, ]
df_test_1<- df_test_1[df_test_1$area_def >= 30, ]
summary(df_test_1)
hist(df_test_1$area_def, main="Histograma del área", xlab="Área",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
banos_1 <- str_extract(df_test_1$description, "\\s? [0-9]+ ba[^lsrh][^cd]")
print(banos_1)
skim(banos_1)
banos_conteo <- str_count(df_test_1$description, "ba[^lsrh][^cd]")
skim(banos_conteo)
df_test_1 <- df_test_1 %>%
mutate(bano_2=str_extract(banos_1,"[0-9]+")) %>%
mutate(bano_3=str_count(df_test_1$description, "ba[^lsrh][^cd]"))
df_test_1$bano_2 <- as.numeric(df_test_1$bano_2)
df_test_1$bano_3 <- as.numeric(df_test_1$bano_3)
skim(df_test_1)
table(df_test_1$bano_2)
df_test_1 <- df_test_1 %>% # Se escoge el valor máximo de las variables
mutate(bano_def=pmax(df_test_1$bano_2,df_test_1$bano_3,df_test_1$bathrooms,na.rm = TRUE))
df_test_1 <- df_test_1 %>%
mutate(bano_def=ifelse(bano_def>10,pmax(df_test_1$bano_3,df_test_1$bathrooms,na.rm = TRUE),df_test_1$bano_def))
skim(df_test_1)
glimpse(df_test_1)
df_test_1$bano_defnum <- as.numeric(df_test_1$bano_def)
hist(df_test_1$bano_defnum, main="Histograma de banos", xlab="Banos",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=2)
# Crear una tabla de frecuencias usando la función table para baños
tabla_frecuencias_banos <- table(df_test_1$bano_defnum)
# Mostrar la tabla de frecuencias
print(tabla_frecuencias_banos)
summary(df_test_1$bano_defnum)
tabla <- table(df_test_1$bano_def)
print(tabla)
skim(df_test_1)
## Determinación de nueva variable "Tiene baño social"
## Si el #de baños es mayor al número de habitaciones, hay baño social
df_test_1 <- df_test_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
skim(df_test_1)
glimpse(df_test_1)
summary(df_test_1$bano_social)
df_test_1 <- df_test_1 %>%
mutate(bodega1=str_detect(df_test_1$description,"[bv]o?de?[gj]a?")) %>%
mutate(deposito1=str_detect(df_test_1$description,"de?po?[cs]ito?s?")) %>%
mutate(deposito_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_test_1 %>%
count(deposito_def)
df_test_1 <- df_test_1 %>%
mutate(nuevo=str_detect(df_test_1$description,"[nm]ue[vb][oa]")) %>%
mutate(estado_construccion=ifelse((nuevo==TRUE),1,0))
df_test_1 %>%
count(estado_construccion)
df_test_1 <- df_test_1 %>%
mutate(remodelado=str_detect(df_test_1$description,"[a-z]emodela[db][a-z]")) %>%
mutate(estado_remodelado=ifelse((remodelado==TRUE),1,0))
df_test_1 %>%
count(estado_remodelado)
df_test_1 <- df_test_1 %>%
mutate(terraza=str_detect(df_test_1$description,"terra[sz]a?")) %>%
mutate(balcon=str_detect(df_test_1$description,"[vb]alcon")) %>%
mutate(terraza_balcon_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_test_1 %>%
count(terraza_balcon_def)
df_train_TM_est_UPZ>- load("Train2.Rda")
df_train_TM_est_UPZ<- load("Train2.Rda")
View(df_train)
View(df_test)
load("Train2.Rda")
## Merge de la base con variables externas
setwd("C:/Users/dj.farfan10.UANDES/Documents/GitHub/Taller-2/stores")
load("Train2.Rda")
View(train)
View(df_train_1)
View(df_test_1)
save(train_clean,file = "C:/Users/dj.farfan10.UANDES/Documents/GitHub/Taller-2/stores/train_clean.Rda")
save(df_train_1,file = "C:/Users/dj.farfan10.UANDES/Documents/GitHub/Taller-2/stores/train_clean.Rda")
save(df_test_1,file = "C:/Users/dj.farfan10.UANDES/Documents/GitHub/Taller-2/stores/test_clean.Rda")
## Merge de la base con variables externas
setwd("C:/Users/dj.farfan10.UANDES/Documents/GitHub/Taller-2/stores")
load("Train2.Rda")
load("Test-TM-Est-UPL.Rda")
load("test_clean.Rda")
load("train_clean.Rda")
df1 <- data.frame(ID = c(1, 2, 3),
Nombre = c("Alice", "Bob", "Charlie"))
df2 <- data.frame(ID = c(4, 5, 6),
Nombre = c("David", "Eva", "Frank"))
# Realizar un merge vertical
df_merged <- rbind(df1, df2)
# Mostrar el resultado
print(df_merged)
View(df1)
View(df1)
View(test)
df1 <- data.frame(ID = c(1, 2, 3),
Nombre = c("Alice", "Bob", "Charlie"))
df2 <- data.frame(ID = c(2, 3, 4),
InformacionExtra = c("Extra1", "Extra2", "Extra3"))
# Realizar un merge basado en el ID
df_merged <- merge(df1, df2, by = "ID", all.x = TRUE)
# Mostrar el resultado
print(df_merged)
df_train_merged <- merge(df_test_1, tes, by = "property_id", all.x = TRUE)
print(df_train_merged)
df_train_merged <- merge(df_test_1, test, by = "property_id", all.x = TRUE)
print(df_train_merged)
View(df_train_merged)
