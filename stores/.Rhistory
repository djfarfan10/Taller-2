install.packages("pacman")
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample) # Muestreo espacial para modelos de aprendizaje automático
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-2/stores")
df_train<- read.csv("train.csv")
head(df_train)
df_test<- read.csv("test.csv")
head(df_test)
glimpse(df_train)
df_train %>%
count(property_type)
sapply(df_train, function(x) sum(is.na(x)))
df_train_1<- df_train[!is.na(df_train$description), ]
sapply(df_train_1, function(x) sum(is.na(x)))
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "casa", property_type))
# Se repite el caso anterior pero ahora buscamos apartamento o apto.
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("apto|apartamento", description), "apartamento", property_type_2)) %>%
select(-property_type)
df_train %>%
count(property_type_2)
df_train_1 %>%
count(property_type_2)
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "Casa", property_type))
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("casa", description), "Casa", property_type))
df_train_1 <- df_train_1 %>%
mutate(parqueadero = as.numeric(grepl("[Pp]arqueadero?|[Gg]araje?|[Ee]stacionamiento?", df_train_1$description)))
df_train_1 %>%
count(parqueadero)
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample) # Muestreo espacial para modelos de aprendizaje automático
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-2/stores")
df_train<- read.csv("train.csv")
head(df_train)
df_test<- read.csv("test.csv")
head(df_test)
glimpse(df_train)
df_train %>%
count(property_type)
sapply(df_train, function(x) sum(is.na(x)))
df_train_1<- df_train[!is.na(df_train$description), ]
sapply(df_train_1, function(x) sum(is.na(x)))
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("[Cc]asa", description), "Casa", property_type))
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("[Aa]pto|[Aa]partamento", description), "Apartamento", property_type_2)) %>%
select(-property_type)
df_train_1 %>%
count(property_type_2)
df_train_1 <- df_train_1 %>%
mutate(description = str_to_lower(description))
df_train_1 <- df_train_1 %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
df_train_1 <- df_train_1 %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
df_train_1 <- df_train_1 %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df_train_1 <- df_train_1 %>%
mutate(parqueadero = as.numeric(grepl("[Pp]arqueadero?|[Gg]araje?|[Ee]stacionamiento?", df_train_1$description)))
df_train_1 %>%
count(parqueadero)
area_total <- str_extract(df_train_1$description, "[0-9]{2,} m[a-z0-9]+")
head(area_total)
df_train_1 <- df_train_1 %>%
mutate(area_tamano=str_extract(area_total,"[0-9]{2,}"))
df_train_1$area_tamano <- as.numeric(df_train_1$area_tamano)
library (skimr)
require(skimr)
install.packages("skimr")
library (skimr)
require(skimr)
skim(df_train_1)
df_train_1 <- df_train_1 %>%
mutate(area_def=pmax(df_train_1$surface_covered,df_train_1$surface_total,df_train_1$area_tamano,na.rm = TRUE))
sapply(df_train_1, function(x) sum(is.na(x)))
hist(df_train_1$area_def, main="Histograma de la edad", xlab="Área",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
df_continuas<- df_train_1 %>%
select(area_def)
summary(df_continuas)
df_continuas<- df_train_1 %>%
select(area_def, price)
summary(df_continuas)
hist(df_train_1$price, main="Histograma del precio", xlab="Precio",ylab="Densidad/Frecuencia",col="darkblue", border = ("grey"), breaks=100)
View(df_train)
View(df_train)
View(df_train_1)
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample) # Muestreo espacial para modelos de aprendizaje automático
library (pacman)
library (pacman)
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-2/stores")
df_train<- read.csv("train.csv")
head(df_train)
