library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample) # Muestreo espacial para modelos de aprendizaje automático
setwd("d:/Javier/Desktop/UNIANDES/Big Data/Taller-2/stores")
df_train<- read.csv("train.csv")
df_test<- read.csv("test.csv")
glimpse(df_train)
df_train %>%
count(property_type)
sapply(df_train, function(x) sum(is.na(x)))
df_train_1<- df_train[!is.na(df_train$description), ]
sapply(df_train_1, function(x) sum(is.na(x)))
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("[Cc]asa", description), "Casa", property_type))
# Se repite el caso anterior pero ahora buscamos apartamento o apto.
df_train_1 <- df_train_1 %>%
mutate(property_type_2 = ifelse(grepl("[Aa]pto|[Aa]partamento", description), "Apartamento", property_type_2)) %>%
select(-property_type)
df_train_1 %>%
count(property_type_2)
df_train_1 <- df_train_1 %>%
mutate(description = str_to_lower(description))
# Eliminación de tildes
df_train_1 <- df_train_1 %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Eliminamción de caracteres especiales
df_train_1 <- df_train_1 %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
# Eliminamos espacios extras
df_train_1 <- df_train_1 %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df_train_1 <- df_train_1 %>%
mutate(parqueadero = as.numeric(grepl("[Pp]arqueadero?|[Gg]araje?|[Ee]stacionamiento?", df_train_1$description)))
df_train_1 %>%
count(parqueadero)
area_total <- str_extract(df_train_1$description, "[0-9]{2,} m[a-z0-9]+|[0-9]{2,}m[a-z0-9]+")
df_train_1 <- df_train_1 %>%
mutate(area_tamano=str_extract(area_total,"[0-9]{2,}"))
df_train_1$area_tamano <- as.numeric(df_train_1$area_tamano)
library (skimr)
require(skimr)
skim(df_train_1)
df_train_1 <- df_train_1 %>%
mutate(area_def=pmax(df_train_1$surface_covered,df_train_1$surface_total,df_train_1$area_tamano,na.rm = TRUE))
x<- 20000
subset_df <- subset(df_train_1, df_train_1$area_def>x & df_train_1$area_def !="none")
print(subset_df)
subset_df %>%
count(property_type_2)
sapply(df_train_1, function(x) sum(is.na(x)))
df_continuas<- df_train_1 %>%
select(area_def, price)
summary(df_continuas)
NAN2_df_area <- df_train_1[!is.na(df_train_1$area_def), ]
sapply(NAN2_df_area, function(x) sum(is.na(x)))
mean_area<- mean(NAN2_df_area$area_def)
print(mean_area)
median_area<- median(NAN2_df_area$area_def)
print(median_area)
df_train_1 <- df_train_1 %>%
mutate(area_def = replace_na(area_def, 119),)
summary(df_train_1)
sapply(df_train_1, function(x) sum(is.na(x)))
std_area<- sd(NAN2_df_area$area_def)
print(std_area)
mean_plus_3std<-mean_area+3*std_area
print(mean_plus_3std)
df_train_1<- df_train_1[df_train_1$area_def <= 1000, ]
df_train_1<- df_train_1[df_train_1$area_def >= 30, ]
banos_1 <- str_extract(df_train_1$description, "\\s? [0-9]+ ba[^lsrh][^cd]")
print(banos_1)
skim(banos_1)
banos_conteo <- str_count(df_train_1$description, "ba[^lsrh][^cd]")
df_train_1 <- df_train_1 %>%
mutate(bano_2=str_extract(banos_1,"[0-9]+")) %>%
mutate(bano_3=str_count(df_train_1$description, "ba[^lsrh][^cd]"))
df_train_1$bano_2 <- as.numeric(df_train_1$bano_2)
df_train_1$bano_3 <- as.numeric(df_train_1$bano_3)
table(df_train_1$bano_2)
df_train_1 <- df_train_1 %>% # Se escoge el valor máximo de las variables
mutate(bano_def=pmax(df_train_1$bano_2,df_train_1$bano_3,df_train_1$bathrooms,na.rm = TRUE))
df_train_1 <- df_train_1 %>%
mutate(bano_def=ifelse(bano_def>10,pmax(df_train_1$bano_3,df_train_1$bathrooms,na.rm = TRUE),df_train_1$bano_def))
df_train_1$bano_defnum <- as.numeric(df_train_1$bano_def)
df_train_1 <- df_train_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
df_train_1 <- df_train_1 %>%
mutate(bodega1=str_detect(df_train_1$description,"[bv]o?de?[gj]a?")) %>%
mutate(deposito1=str_detect(df_train_1$description,"de?po?[cs]ito?s?")) %>%
mutate(deposito_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_train_1 %>%
count(deposito_def)
df_train_1 <- df_train_1 %>%
mutate(nuevo=str_detect(df_train_1$description,"[nm]ue[vb][oa]")) %>%
mutate(estado_construccion=ifelse((nuevo==TRUE),1,0))
df_train_1 %>%
count(estado_construccion)
df_train_1 <- df_train_1 %>%
mutate(remodelado=str_detect(df_train_1$description,"[a-z]emodela[db][a-z]")) %>%
mutate(estado_remodelado=ifelse((remodelado==TRUE),1,0))
df_train_1 %>%
count(estado_remodelado)
df_train_1 <- df_train_1 %>%
mutate(terraza=str_detect(df_train_1$description,"terra[sz]a?")) %>%
mutate(balcon=str_detect(df_train_1$description,"[vb]alcon")) %>%
mutate(terraza_balcon_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_train_1 %>%
count(terraza_balcon_def)
View(df_train_1)
df_test %>%
count(property_type)
sapply(df_test, function(x) sum(is.na(x)))
df_test_1<- df_test
sapply(df_test_1, function(x) sum(is.na(x)))
df_test_1 <- df_test_1 %>%
mutate(property_type_2 = ifelse(grepl("[Cc]asa", description), "Casa", property_type))
df_test_1 <- df_test_1 %>%
mutate(property_type_2 = ifelse(grepl("[Aa]pto|[Aa]partamento", description), "Apartamento", property_type_2)) %>%
select(-property_type)
df_test_1 %>%
count(property_type_2)
df_test_1 <- df_test_1 %>%
mutate(description = str_to_lower(description))
# Eliminación de tildes
df_test_1 <- df_test_1 %>%
mutate(description = iconv(description, from = "UTF-8", to = "ASCII//TRANSLIT"))
# Eliminamción de caracteres especiales
df_test_1 <- df_test_1 %>%
mutate(description = str_replace_all(description, "[^[:alnum:]]", " "))
# Eliminamos espacios extras
df_test_1 <- df_test_1 %>%
mutate(description = str_trim(gsub("\\s+", " ", description)))
df_test_1 <- df_test_1 %>%
mutate(parqueadero = as.numeric(grepl("[Pp]arqueadero?|[Gg]araje?|[Ee]stacionamiento?", df_test_1$description)))
df_test_1 %>%
count(parqueadero)
area_total <- str_extract(df_test_1$description, "[0-9]{2,} m[a-z0-9]+|[0-9]{2,}m[a-z0-9]+")
head(area_total)
df_test_1 <- df_test_1 %>%
mutate(area_tamano=str_extract(area_total,"[0-9]{2,}"))
df_test_1$area_tamano <- as.numeric(df_test_1$area_tamano)
df_test_1 <- df_test_1 %>%
mutate(area_def=pmax(df_test_1$surface_covered,df_test_1$surface_total,df_test_1$area_tamano,na.rm = TRUE))
x<- 20000
subset_df_test <- subset(df_test_1, df_test_1$area_def>x & df_test_1$area_def !="none")
print(subset_df_test)
subset_df_test %>%
count(property_type_2)
sapply(df_test_1, function(x) sum(is.na(x)))
df_continuas<- df_test_1 %>%
select(area_def)
summary(df_continuas)
NAN2_df_area <- df_test_1[!is.na(df_test_1$area_def), ]
sapply(NAN2_df_area, function(x) sum(is.na(x)))
mean_area<- mean(NAN2_df_area$area_def)
print(mean_area)
median_area<- median(NAN2_df_area$area_def)
print(median_area)
df_test_1 <- df_test_1 %>%
mutate(area_def = replace_na(area_def, 125),)
summary(df_test_1)
sapply(df_test_1, function(x) sum(is.na(x)))
banos_1 <- str_extract(df_test_1$description, "\\s? [0-9]+ ba[^lsrh][^cd]")
banos_conteo <- str_count(df_test_1$description, "ba[^lsrh][^cd]")
df_test_1 <- df_test_1 %>%
mutate(bano_2=str_extract(banos_1,"[0-9]+")) %>%
mutate(bano_3=str_count(df_test_1$description, "ba[^lsrh][^cd]"))
df_test_1$bano_2 <- as.numeric(df_test_1$bano_2)
df_test_1$bano_3 <- as.numeric(df_test_1$bano_3)
table(df_test_1$bano_2)
df_test_1 <- df_test_1 %>% # Se escoge el valor máximo de las variables
mutate(bano_def=pmax(df_test_1$bano_2,df_test_1$bano_3,df_test_1$bathrooms,na.rm = TRUE))
df_test_1 <- df_test_1 %>%
mutate(bano_def=ifelse(bano_def>10,pmax(df_test_1$bano_3,df_test_1$bathrooms,na.rm = TRUE),df_test_1$bano_def))
df_test_1$bano_defnum <- as.numeric(df_test_1$bano_def)
NAN2_df_banos <- df_test_1[!is.na(df_test_1$bano_defnum), ]
sapply(NAN2_df_banos, function(x) sum(is.na(x)))
mediana_bano<- median(NAN2_df_banos$bano_defnum)
print(mediana_bano)
df_test_1 <- df_test_1 %>%
mutate(bano_defnum = replace_na(bano_defnum, 3),)
summary(df_test_1)
sapply(df_test_1, function(x) sum(is.na(x)))
df_test_1 <- df_test_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
df_test_1 <- df_test_1 %>%
mutate(bodega1=str_detect(df_test_1$description,"[bv]o?de?[gj]a?")) %>%
mutate(deposito1=str_detect(df_test_1$description,"de?po?[cs]ito?s?")) %>%
mutate(deposito_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_test_1 %>%
count(deposito_def)
NAN2_df_dep <- df_test_1[!is.na(df_test_1$deposito_def), ]
sapply(NAN2_df_dep, function(x) sum(is.na(x)))
mediana_dep<- median(NAN2_df_dep$deposito_def)
print(mediana_dep)
df_test_1 <- df_test_1 %>%
mutate(deposito_def = replace_na(deposito_def, 0),)
sapply(df_test_1, function(x) sum(is.na(x)))
df_test_1 <- df_test_1 %>%
mutate(nuevo=str_detect(df_test_1$description,"[nm]ue[vb][oa]")) %>%
mutate(estado_construccion=ifelse((nuevo==TRUE),1,0))
df_test_1 %>%
count(estado_construccion)
df_test_1 <- df_test_1 %>%
mutate(estado_construccion = replace_na(estado_construccion, 0),)
df_test_1 <- df_test_1 %>%
mutate(remodelado=str_detect(df_test_1$description,"[a-z]emodela[db][a-z]")) %>%
mutate(estado_remodelado=ifelse((remodelado==TRUE),1,0))
df_test_1 %>%
count(estado_remodelado)
df_test_1 <- df_test_1 %>%
mutate(estado_remodelado = replace_na(estado_remodelado, 0),)
df_test_1 <- df_test_1 %>%
mutate(terraza=str_detect(df_test_1$description,"terra[sz]a?")) %>%
mutate(balcon=str_detect(df_test_1$description,"[vb]alcon")) %>%
mutate(terraza_balcon_def=ifelse((bodega1==TRUE | deposito1==TRUE),1,0))
df_test_1 %>%
count(terraza_balcon_def)
sapply(df_test_1, function(x) sum(is.na(x)))
df_test_1 <- df_test_1 %>%
mutate(terraza_balcon_def = replace_na(terraza_balcon_def, 0),)
sapply(df_test_1, function(x) sum(is.na(x)))
View(df_test_1)
View(df_train_1)
df_train_1 <- df_train_1 %>% mutate(bano_social = case_when(bano_social == "si"~ 1,
bano_social == "no"~ 0))
df_test_1 <- df_test_1 %>% mutate(bano_social = case_when(bano_social == "si"~ 1,
bano_social == "no"~ 0))
View(df_test_1)
View(df_train_1)
df_train_1 <- df_train_1 %>% mutate(bano_social = case_when(bano_social == "si"~ 1,
bano_social == "no"~ 0))
View(df_train_1)
df_train_1 <- df_train_1 %>% mutate(bano_social = case_when(bano_social == "si"~ 1,
bano_social == "no"~ 0))
View(df_train_1)
df_train_1 <- df_train_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
View(df_train_1)
f_test_1 <- df_test_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
View(df_test_1)
df_test_1 <- df_test_1 %>%
mutate(bano_social = if_else(bano_defnum > bedrooms, "si", "no"))
View(df_test_1)
df_train_1 <- df_train_1 %>% mutate(bano_social = case_when(bano_social == "si"~ 1,
bano_social == "no"~ 0))
df_test_1 <- df_test_1 %>% mutate(bano_social = case_when(bano_social == "si"~ 1,
bano_social == "no"~ 0))
View(df_test)
View(df_test_1)
View(df_train_1)
save(df_train_1,file = "d:/Javier/Desktop/UNIANDES/Big Data/Taller-2/stores/train_clean.Rda")
save(df_test_1,file = "d:/Javier/Desktop/UNIANDES/Big Data/Taller-2/stores/test_clean.Rda")
setwd("C:/Users/dj.farfan10/Documents/GitHub/Taller-2/stores")
setwd("d:/Javier/Desktop/UNIANDES/Big Data/Taller-2/stores")
library (pacman)
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample) # Muestreo espacial para modelos de aprendizaje automático
load("Test-TM-Est-UPL-UPZ.Rda")
load("Train-TM-Est-UPL-UPZ.Rda")
df_train <- train
df_train<- df_train %>%
select(property_id, distancia_TM, estrato, color, CODIGO_UPL, UPL,cod_loc,Localidad,cod_upz,UPZ,densidad_urbana)
df_test <- test
df_test<- df_test %>%
select(property_id, distancia_TM, estrato, color, CODIGO_UPL, UPL,cod_loc,Localidad,cod_upz,UPZ,densidad_urbana)
sapply(df_test, function(x) sum(is.na(x))) ##49 NAN por UPZ
sapply(df_train, function(x) sum(is.na(x))) ##6 NAN por UPZ
View(df_test)
df_train<- df_train %>%
select(property_id, distancia_TM, estrato, color, CODIGO_UPL, UPL,cod_loc,Localidad,cod_upz,UPZ,densidad_urbana)
df_test<- df_test %>%
select(property_id, distancia_TM, estrato, color, CODIGO_UPL, UPL,cod_loc,Localidad,cod_upz,UPZ,densidad_urbana)
View(df_train)
load("test_clean.Rda")
df_test_1<- df_test_1 %>%
select(property_id, price, lat, lon, description, property_type_2, bedrooms, parqueadero, area_def, bano_defnum, bano_social, deposito_def, estado_construccion, estado_remodelado, terraza_balcon_def)
load("train_clean.Rda")
df_train_1<- df_train_1 %>%
select(property_id, price, lat, lon, description, property_type_2, bedrooms, parqueadero, area_def, bano_defnum, bano_social, deposito_def, estado_construccion, estado_remodelado, terraza_balcon_def)
df_test_merged <- merge(df_test_1, df_test, by = "property_id", all.x = TRUE)
View(df_test_merged)
sapply(df_test_merged, function(x) sum(is.na(x)))
df_train_merged <- merge(df_train_1, df_train, by = "property_id", all.x = TRUE)
sapply(df_train_merged, function(x) sum(is.na(x)))
df_train_merged<- df_train_merged[!is.na(df_train_merged$UPZ), ]
sapply(df_train_merged, function(x) sum(is.na(x)))
NAN2_dftest_UPZ <- df_test_1[!is.na(df_test_1$UPZ), ]
NAN2_dftest_UPZ <- df_test_merged[!is.na(df_test_merged$UPZ), ]
sapply(NAN2_dftest_UPZ, function(x) sum(is.na(x)))
mediana_UPZ<- median(NAN2_dftest_UPZ$UPZ)
print(mediana_UPZ)
df_test_merged <- df_test_merged %>%
mutate(UPZ = replace_na(UPZ, "EL REFUGIO"),)
sapply(df_test_merged, function(x) sum(is.na(x)))
glimpse(df_test_merge)
glimpse(df_test_merged)
summarise(df_test_merged)
summary(df_test_merged)
skim(df_test_merged)
View(df_test_merged)
class(df_test_merged$cod_upz)
NAN2_dftest_codUPZ <- df_test_merged[!is.na(df_test_merged$cod_upz), ]
sapply(NAN2_dftest_codUPZ, function(x) sum(is.na(x)))
mediana_codUPZ<- median(NAN2_dftest_codUPZ$cod_upz)
print(mediana_codUPZ)
df_test_merged <- df_test_merged %>%
mutate(cod_upz = replace_na(cod_upz, "90"),)
sapply(df_test_merged, function(x) sum(is.na(x)))
NAN2_dftest_loc <- df_test_merged[!is.na(df_test_merged$Localidad), ]
sapply(NAN2_dftest_loc, function(x) sum(is.na(x)))
mediana_loc<- median(NAN2_dftest_loc$Localidad)
print(mediana_loc)
df_test_merged <- df_test_merged %>%
mutate(Localidad = replace_na(Localidad, "CHAPINERO"),)
sapply(df_test_merged, function(x) sum(is.na(x)))
NAN2_dftest_cloc <- df_test_merged[!is.na(df_test_merged$cod_loc), ]
sapply(NAN2_dftest_cloc, function(x) sum(is.na(x)))
mediana_cloc<- median(NAN2_dftest_cloc$cod_loc)
print(mediana_cloc)
df_test_merged <- df_test_merged %>%
mutate(cod_loc = replace_na(cod_loc, "2"),)
class(df_test_merged$cod_loc)
df_test_merged <- df_test_merged %>%
mutate(cod_loc = replace_na(cod_loc, 2),)
sapply(df_test_merged, function(x) sum(is.na(x)))
df_train_merged$distancia_TM<-as.double(df_train_merged$distancia_TM)
df_test_merged$distancia_TM<-as.double(df_test_merged$distancia_TM)
variables_categoricas <- c("parqueadero",
"bano_social",
"deposito_def",
"estado_construccion",
"estado_remodelado",
"terraza_balcon_def",
"estrato",
"cod_loc",
"cod_upz")
df_train_merged <- df_train_merged %>%
mutate_at(variables_categoricas, as.factor)
df_test_merged <- df_test_merged %>%
mutate_at(variables_categoricas, as.factor)
df_seguridad<- read.csv("seguridad1.csv")
df_seguridad<- read.csv("seguridad.csv")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
library(readxl)
dataset <- read_excel(NULL)
library(readxl)
df_seguridad<- read.csv("export.csv")
View(df_seguridad)
df_seguridad <- df_seguridad %>%
mutate(cod_upz=str_extract(Código.upz,"[0-9]{2,}"))
View(df_seguridad)
df_seguridad$cod_upz <- as.numeric(df_seguridad$cod_upz)
View(df_seguridad)
df_seguridad <- df_seguridad %>%
mutate(Código.upz=str_extract(Código.upz,"[0-9]{2,}"))
View(df_seguridad)
class(df_seguridad$Código.upz)
df_seguridad<- read.csv("seguridad2019.csv")
View(df_seguridad)
df_seguridad <- df_seguridad %>%
mutate(Código.upz=str_extract(Código.upz,"[0-9]{2,}"))
class(df_seguridad$Código.upz)
glimpse(df_seguridad)
df_seguridad <- df_seguridad %>%
mutate(as.numeric)
df_seguridad$Total.Hurto.Personas.2019<-as.numeric(df_seguridad$Total.Hurto.Personas.2019)
glimpse(df_seguridad)
df_seguridad$Total.Hurto.Personas.2019<-as.integer(df_seguridad$Total.Hurto.Personas.2019)
glimpse(df_seguridad)
df_seguridad$Total.Hurto.Celulares.2019<-as.integer(df_seguridad$Total.Hurto.Celulares.2019)
glimpse(df_seguridad)
df_seguridad$Total.Violencia.intrafamiliar.2019<-as.integer(df_seguridad$Total.Violencia.intrafamiliar.2019)
glimpse(df_seguridad)
df_seguridad <- df_seguridad %>%
mutate(delitos_total_2019 = Total.Homicidios.2019 + Total.Lesiones.Personales.2019 + Total.Hurto.Personas.2019+Total.Hurto.Residencias.2019 + Total.Hurto.Automotores.2019 + Total.Hurto.Bicicletas.2019 + Total.Hurto.Comercio.2019 + Total.Hurto.Celulares.2019 + otal.Hurto.Motocicletas.2019 + otal.Delitos.Sexuales.2019 + Total.Violencia.intrafamiliar.2019)
df_seguridad <- df_seguridad %>%
mutate(delitos_total_2019 = Total.Homicidios.2019 + Total.Lesiones.Personales.2019 + Total.Hurto.Personas.2019+Total.Hurto.Residencias.2019 + Total.Hurto.Automotores.2019 + Total.Hurto.Bicicletas.2019 + Total.Hurto.Comercio.2019 + Total.Hurto.Celulares.2019 + Total.Hurto.Motocicletas.2019 + Total.Delitos.Sexuales.2019 + Total.Violencia.intrafamiliar.2019)
sapply(df_seguridad, function(x) sum(is.na(x)))
df_seguridad <- df_seguridad %>%
mutate(delitos_total_2019 = Total.Homicidios.2019 + Total.Lesiones.Personales.2019 +Total.Hurto.Residencias.2019 + Total.Hurto.Automotores.2019 + Total.Hurto.Bicicletas.2019 + Total.Hurto.Comercio.2019 + Total.Hurto.Celulares.2019 + Total.Hurto.Motocicletas.2019 + Total.Delitos.Sexuales.2019 + Total.Violencia.intrafamiliar.2019)
sapply(df_seguridad, function(x) sum(is.na(x)))
df_seguridad<- df_seguridad[!is.na(df_seguridad$Código.upz), ]
sapply(df_seguridad, function(x) sum(is.na(x)))
df_seguridad <- df_seguridad %>%
mutate(Total.Hurto.Celulares.2019 = replace_na(Total.Hurto.Celulares.2019, 0),)
df_seguridad <- df_seguridad %>%
mutate(Total.Violencia.intrafamiliar.2019 = replace_na(Total.Violencia.intrafamiliar.2019, 0),)
df_seguridad <- df_seguridad %>%
mutate(delitos_total_2019 = Total.Homicidios.2019 + Total.Lesiones.Personales.2019 +Total.Hurto.Residencias.2019 + Total.Hurto.Automotores.2019 + Total.Hurto.Bicicletas.2019 + Total.Hurto.Comercio.2019 + Total.Hurto.Celulares.2019 + Total.Hurto.Motocicletas.2019 + Total.Delitos.Sexuales.2019 + Total.Violencia.intrafamiliar.2019)
sapply(df_seguridad, function(x) sum(is.na(x)))
df_seguridad_1<- df_seguridad_1 %>%
select(delitos_total_2019)
df_seguridad_1<- df_seguridad %>%
select(delitos_total_2019)
View(df_seguridad_1)
df_seguridad_1<- df_seguridad %>%
select(Código.upz, delitos_total_2019)
View(df_train_merged)
df_seguridad_1$cod_upz <- df_seguridad_1$Código.upz
df_seguridad_1 <- df_seguridad_1[, -which(names(df_seguridad_1) == "Código.upz")]
View(df_seguridad_1)
df_train_merge2 <- merge(df_train_merged, df_seguridad_1, by = "cod_upz", all.x = TRUE)
View(df_train_merge2)
df_train_merge2 %>%
count(cod_upz)
df_test_merge2 <- merge(df_test_merged, df_seguridad_1, by = "cod_upz", all.x = TRUE)
df_test_merge2 %>%
count(cod_upz)
sapply(df_test_merge2, function(x) sum(is.na(x)))
sapply(df_train_merge2, function(x) sum(is.na(x)))
df_train_merge2<- df_train_merge2[!is.na(df_train_merge2$delitos_total_2019), ]
sapply(df_train_merge2, function(x) sum(is.na(x)))
class(df_train_merge2$delitos_total_2019)
class(df_test_merge2$delitos_total_2019)
View(df_test_merge2)
View(df_train_merge2)
save(df_train_merge2,file = "d:/Javier/Desktop/UNIANDES/Big Data/Taller-2/stores/train_def1.Rda")
save(df_test_merge2,file = "d:/Javier/Desktop/UNIANDES/Big Data/Taller-2/stores/test_def1.Rda")
load("Test_def1.Rda")
df
View(df_test_merge2)
load("Train_def1.Rda")
View(df_train_merge2)
